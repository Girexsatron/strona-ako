// =========== KALKULATOR OSZCZÄ˜DNOÅšCI ENERGETYCZNYCH ===========
// ðŸ’° Ten plik zawiera funkcje do obsÅ‚ugi kalkulatora oszczÄ™dnoÅ›ci energetycznych

document.addEventListener('DOMContentLoaded', function() {
    // Inicjalizujemy kalkulator oszczÄ™dnoÅ›ci energetycznych
    initEnergyCalculator();
});

// ðŸ”¢ INICJALIZACJA KALKULATORA
function initEnergyCalculator() {
    const calculatorForm = document.querySelector('.calculator-form');
    
    // JeÅ›li nie ma kalkulatora na stronie, koÅ„czymy
    if (!calculatorForm) return;
    
    // ZnajdÅº przycisk obliczania i dodaj obsÅ‚ugÄ™ klikniÄ™cia
    const calculateButton = document.getElementById('calculate-savings');
    
    if (calculateButton) {
        calculateButton.addEventListener('click', calculateEnergySavings);
        
        // WstÄ™pne obliczenie przy zaÅ‚adowaniu strony
        calculateEnergySavings();
    }
    
    // Dodaj obsÅ‚ugÄ™ zmiany wartoÅ›ci w polach formularza
    const inputFields = calculatorForm.querySelectorAll('input, select');
    inputFields.forEach(field => {
        field.addEventListener('change', () => {
            // Dodajemy lekkie opÃ³Åºnienie, aby animacja siÄ™ wykonaÅ‚a
            setTimeout(calculateEnergySavings, 100);
        });
    });
    
    console.log('âœ… Kalkulator oszczÄ™dnoÅ›ci energetycznych zainicjalizowany');
}

// ðŸ§® OBLICZANIE OSZCZÄ˜DNOÅšCI
function calculateEnergySavings() {
    // Pobieramy wartoÅ›ci z formularza
    const windowArea = parseFloat(document.getElementById('window-area').value || 0);
    const windowType = document.getElementById('window-type').value;
    const heatingType = document.getElementById('heating-type').value;
    
    // Walidacja danych
    if (windowArea <= 0) {
        alert('ProszÄ™ podaÄ‡ prawidÅ‚owÄ… powierzchniÄ™ okien');
        return;
    }
    
    // Pobieramy wspÃ³Å‚czynniki przenikania ciepÅ‚a (U) dla rÃ³Å¼nych typÃ³w okien (W/mÂ²K)
    const windowUValues = {
        'old-single': 5.0,     // Stare okna jednoszybowe
        'old-double': 2.8,     // Stare okna dwuszybowe
        'standard-double': 1.5, // Standardowe okna dwuszybowe
        'standard-triple': 1.1, // Standardowe okna trzyszybowe
        'new-triple': 0.8      // Nowe okna trzyszybowe (nasza oferta)
    };
    
    // Ceny energii za kWh dla rÃ³Å¼nych rodzajÃ³w ogrzewania (zÅ‚/kWh)
    const energyPrices = {
        'gas': 0.35,        // Gaz ziemny
        'electric': 0.75,   // PrÄ…d elektryczny
        'coal': 0.25,       // WÄ™giel
        'pellet': 0.30,     // Pellet drzewny
        'oil': 0.48         // Olej opaÅ‚owy
    };
    
    // Emisja CO2 dla rÃ³Å¼nych rodzajÃ³w ogrzewania (kg CO2 / kWh)
    const co2Emissions = {
        'gas': 0.2056,      // Gaz ziemny
        'electric': 0.662,  // PrÄ…d elektryczny
        'coal': 0.4125,     // WÄ™giel
        'pellet': 0.03,     // Pellet drzewny
        'oil': 0.3          // Olej opaÅ‚owy
    };
    
    // Czas grzania w ciÄ…gu roku (dni)
    const heatingDays = 200;
    
    // Åšrednia rÃ³Å¼nica temperatur wewnÄ…trz i na zewnÄ…trz budynku w sezonie grzewczym (K)
    const averageTempDifference = 20;
    
    // WspÃ³Å‚czynnik czasu ogrzewania w ciÄ…gu doby (h)
    const heatingHoursCoefficient = 24;
    
    // PorÃ³wnujemy obecne okna z naszymi najlepszymi oknami
    const currentUValue = windowUValues[windowType];
    const newUValue = windowUValues['new-triple'];
    
    // Obliczamy roczne straty ciepÅ‚a przez okna (kWh/rok)
    // Q = U * A * Î”T * t * 0.001
    // gdzie U - wspÃ³Å‚czynnik przenikania, A - powierzchnia, Î”T - rÃ³Å¼nica temperatur, 
    // t - czas (w godzinach), 0.001 - przelicznik na kWh
    const currentHeatLoss = currentUValue * windowArea * averageTempDifference * heatingDays * heatingHoursCoefficient * 0.001;
    const newHeatLoss = newUValue * windowArea * averageTempDifference * heatingDays * heatingHoursCoefficient * 0.001;
    
    // OszczÄ™dnoÅ›Ä‡ energii (kWh/rok)
    const energySavings = currentHeatLoss - newHeatLoss;
    
    // OszczÄ™dnoÅ›Ä‡ finansowa (zÅ‚/rok)
    const financialSavings = energySavings * energyPrices[heatingType];
    
    // OszczÄ™dnoÅ›Ä‡ CO2 (kg/rok)
    const co2Savings = energySavings * co2Emissions[heatingType];
    
    // OszczÄ™dnoÅ›Ä‡ w ciÄ…gu 10 lat
    const tenYearSavings = financialSavings * 10;
    
    // Aktualizujemy wyniki
    document.getElementById('yearly-savings').textContent = Math.round(financialSavings) + ' zÅ‚';
    document.getElementById('ten-year-savings').textContent = Math.round(tenYearSavings) + ' zÅ‚';
    document.getElementById('co2-reduction').textContent = Math.round(co2Savings) + ' kg/rok';
    
    // Dodajemy animacje dla wynikÃ³w
    animateResults();
}

// ðŸ’« ANIMACJA WYNIKÃ“W
function animateResults() {
    const results = document.querySelectorAll('.result-value');
    
    results.forEach(result => {
        // Dodajemy klasÄ™ dla animacji
        result.classList.add('highlight');
        
        // Usuwamy klasÄ™ po zakoÅ„czeniu animacji
        setTimeout(() => {
            result.classList.remove('highlight');
        }, 1000);
    });
    
    // Dodajemy styl CSS dla animacji (jeÅ›li jeszcze nie istnieje)
    if (!document.getElementById('energy-calculator-style')) {
        const style = document.createElement('style');
        style.id = 'energy-calculator-style';
        style.textContent = `
            .result-value.highlight {
                animation: highlight 1s ease;
            }
            
            @keyframes highlight {
                0% { color: var(--primary-color); }
                50% { color: var(--accent-color); }
                100% { color: var(--primary-color); }
            }
        `;
        document.head.appendChild(style);
    }
}

// ðŸ”§ FUNKCJE POMOCNICZE DO FORMATOWANIA WYNIKU
function formatNumber(number, decimals = 0) {
    return number.toFixed(decimals).replace(/\B(?=(\d{3})+(?!\d))/g, " ");
}

// Eksportujemy funkcje aby byÅ‚y dostÄ™pne globalnie
window.calculateEnergySavings = calculateEnergySavings;

document.getElementById('methodology-toggle').addEventListener('click', function(e) {
    e.preventDefault();
    const description = document.getElementById('methodology-description');
    description.style.display = description.style.display === 'none' ? 'block' : 'none';
});