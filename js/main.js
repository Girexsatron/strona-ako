// =========== G≈Å√ìWNE FUNKCJE JAVASCRIPT ===========
// üõ†Ô∏è Ten plik zawiera g≈Ç√≥wne funkcje potrzebne do dzia≈Çania strony

document.addEventListener('DOMContentLoaded', function() {
    // üõ†Ô∏è Naprawa menu dropdown przy pierwszym za≈Çadowaniu + animacje
function fixDropdownMenus() {
    const style = document.createElement('style');
    style.textContent = `
        .dropdown-menu {
            display: none;
            flex-direction: column !important;
            position: absolute;
            top: 100%;
            left: 50%;
            transform: translateX(-50%);
            min-width: 200px;
            background-color: white;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border-radius: 0;
            padding: 0.5rem 0;
            z-index: 1000;
            transform-origin: top center;
            overflow: hidden;
        }
        
        .dropdown:hover .dropdown-menu {
            display: block !important;
            animation: slideDown 0.3s ease forwards;
        }
        
        .dropdown-menu li {
            opacity: 0;
            transform: translateY(-10px);
            animation: fadeInItem 0.5s ease forwards;
        }
        
        .dropdown-menu li:nth-child(1) { animation-delay: 0.05s; }
        .dropdown-menu li:nth-child(2) { animation-delay: 0.1s; }
        .dropdown-menu li:nth-child(3) { animation-delay: 0.15s; }
        .dropdown-menu li:nth-child(4) { animation-delay: 0.2s; }
        .dropdown-menu li:nth-child(5) { animation-delay: 0.25s; }
        
        @keyframes slideDown {
            from {
                transform: translateX(-50%) scaleY(0);
                transform-origin: top center;
            }
            to {
                transform: translateX(-50%) scaleY(1);
                transform-origin: top center;
            }
        }
        
        @keyframes fadeInItem {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    `;
    document.head.appendChild(style);
    
    // üîç Dodatkowe zabezpieczenie - ukryj wszystkie menu rozwijane
    const dropdownMenus = document.querySelectorAll('.dropdown-menu');
    dropdownMenus.forEach(menu => {
        menu.style.display = 'none';
    });
    
    console.log('‚ú® Menu dropdown naprawione i upiƒôkszone animacjƒÖ');
}

    // Wywo≈Çaj funkcjƒô naprawiajƒÖcƒÖ na poczƒÖtku
    fixDropdownMenus();
    
    // üîÑ Funkcja menu mobilnego
    setupMobileMenu();
    
    // ‚ùì Obs≈Çuga akordeonu FAQ
    setupFaqAccordion();
    
    // üìä Animacja licznik√≥w
    setupCounters();
    
    // üìù Obs≈Çuga formularza kontaktowego
    setupContactForm();
    
    // ‚¨ÜÔ∏è Przycisk powrotu do g√≥ry
    setupScrollToTop();
    
    // üîΩ Zamykanie menu rozwijanego przy przewijaniu
    setupDropdownCloseOnScroll();
    
    // üì¨ Obs≈Çuga formularza newslettera
    setupNewsletter();
    
    // üìå Inicjalizacja sticky menu - NOWA FUNKCJA
    setupStickyMenu();
    
    console.log('‚úÖ Strona za≈Çadowana poprawnie');
});

// üìå INICJALIZACJA STICKY MENU
function setupStickyMenu() {
    // üîç Znajdujemy elementy menu
    const mainHeader = document.querySelector('.main-header');
    
    // Sprawdzamy, czy header istnieje na stronie
    if (!mainHeader) return;
    
    // üìú Funkcja dodajƒÖca efekty do menu podczas przewijania
    function handleScroll() {
        // Dodajemy klasƒô scrolled do headera po przewiniƒôciu
        if (window.scrollY > 50) { // Klasa dodawana po przewiniƒôciu o 50px
            mainHeader.classList.add('scrolled');
        } else {
            mainHeader.classList.remove('scrolled');
        }
    }
    
    // üîÑ Sprawdzamy scroll przy ≈Çadowaniu strony
    handleScroll();
    
    // üëÇ Nas≈Çuchujemy zdarzenia scroll
    window.addEventListener('scroll', handleScroll);
    
    // üì± Poprawka mobilnego menu - lepsze zamykanie przy klikniƒôciu w link
    const mobileMenuLinks = document.querySelectorAll('.main-menu a');
    const mainMenu = document.querySelector('.main-menu');
    const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
    
    // Obs≈Çuga przycisku menu mobilnego (hamburger)
    if (mobileMenuToggle && mainMenu) {
        mobileMenuToggle.addEventListener('click', function() {
            // Prze≈ÇƒÖczamy klasƒô active dla menu
            mainMenu.classList.toggle('active');
            
            // Zmieniamy ikonƒô przycisku (z hamburger na X)
            const icon = this.querySelector('i');
            if (icon) {
                if (icon.classList.contains('fa-bars')) {
                    icon.classList.remove('fa-bars');
                    icon.classList.add('fa-times');
                } else {
                    icon.classList.remove('fa-times');
                    icon.classList.add('fa-bars');
                }
            }
        });
    }
    
    // Je≈õli znajdziemy linki w menu mobilnym
    if (mobileMenuLinks.length > 0 && mainMenu && mobileMenuToggle) {
        mobileMenuLinks.forEach(link => {
            // Dodajemy obs≈Çugƒô klikniƒôcia dla ka≈ºdego linku
            link.addEventListener('click', function(e) {
                // Sprawdzamy, czy to link w dropdown
                const parentLi = this.closest('li');
                
                // Je≈õli jeste≈õmy na ma≈Çym ekranie (mobilnym)
                if (window.innerWidth < 992) {
                    // Je≈õli link jest w dropdown, to obs≈Çugujemy rozwijanie
                    if (parentLi && parentLi.classList.contains('dropdown')) {
                        // Zatrzymujemy domy≈õlne dzia≈Çanie linku
                        e.preventDefault();
                        
                        // Zamykamy wszystkie inne rozwiniƒôte menu
                        const activeDropdowns = document.querySelectorAll('.dropdown.active');
                        activeDropdowns.forEach(dropdown => {
                            if (dropdown !== parentLi) {
                                dropdown.classList.remove('active');
                            }
                        });
                        
                        // Prze≈ÇƒÖczamy klasƒô active dla dropdown
                        parentLi.classList.toggle('active');
                    } else {
                        // Dla zwyk≈Çych link√≥w (nie dropdown) zamykamy menu po klikniƒôciu
                        if (mainMenu.classList.contains('active')) {
                            mainMenu.classList.remove('active');
                            
                            // Zmieniamy ikonƒô przycisku menu
                            const icon = mobileMenuToggle.querySelector('i');
                            if (icon) {
                                icon.classList.remove('fa-times');
                                icon.classList.add('fa-bars');
                            }
                        }
                    }
                }
            });
        });
    }
    
    // üñ±Ô∏è Poprawka dostƒôpno≈õci - obs≈Çuga menu za pomocƒÖ klawiatury
    const dropdowns = document.querySelectorAll('.dropdown');
    
    dropdowns.forEach(dropdown => {
        const link = dropdown.querySelector('a');
        const submenu = dropdown.querySelector('.dropdown-menu');
        
        if (link && submenu) {
            // Dodajemy atrybuty ARIA dla dostƒôpno≈õci
            link.setAttribute('aria-haspopup', 'true');
            link.setAttribute('aria-expanded', 'false');
            
            // Obs≈Çuga klawisza Enter na linku dropdown
            link.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' || e.key === ' ') {
                    // Zatrzymujemy domy≈õlne dzia≈Çanie
                    e.preventDefault();
                    
                    // Prze≈ÇƒÖczamy klasƒô active dla dropdown
                    dropdown.classList.toggle('active');
                    
                    // Aktualizujemy atrybut aria-expanded
                    const isExpanded = dropdown.classList.contains('active');
                    link.setAttribute('aria-expanded', isExpanded);
                }
            });
        }
    });
    
    // üîç Dodajemy efekt hover dla desktopowych menu za pomocƒÖ JS
    // (to pomo≈ºe z problemami w starszych przeglƒÖdarkach)
    if (window.innerWidth >= 992) {
        dropdowns.forEach(dropdown => {
            // Efekt po najechaniu myszkƒÖ
            dropdown.addEventListener('mouseenter', function() {
                const submenu = this.querySelector('.dropdown-menu');
                if (submenu) {
                    submenu.style.display = 'block';
                    setTimeout(() => {
                        submenu.style.opacity = '1';
                        submenu.style.visibility = 'visible';
                    }, 10);
                }
            });
            
            // Efekt po zjechaniu myszkƒÖ
            dropdown.addEventListener('mouseleave', function() {
                const submenu = this.querySelector('.dropdown-menu');
                if (submenu) {
                    submenu.style.opacity = '0';
                    submenu.style.visibility = 'hidden';
                    
                    // Op√≥≈∫niamy ukrycie, aby animacja mog≈Ça siƒô zako≈Ñczyƒá
                    setTimeout(() => {
                        if (!this.matches(':hover')) {
                            submenu.style.display = 'none';
                        }
                    }, 300);
                }
            });
        });
    }
    
    console.log('‚úÖ Sticky menu zainicjalizowane pomy≈õlnie');
}

// üîÑ MENU MOBILNE
function setupMobileMenu() {
    // Znajdujemy przycisk menu mobilnego i menu g≈Ç√≥wne
    const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
    const mainMenu = document.querySelector('.main-menu');
    const dropdowns = document.querySelectorAll('.dropdown');
    
    // Obs≈Çuga klikniƒôcia przycisku menu
    if (mobileMenuToggle) {
        mobileMenuToggle.addEventListener('click', function(e) {
            // Zatrzymujemy domy≈õlne zachowanie
            e.preventDefault();
            
            // Prze≈ÇƒÖczamy klasƒô active dla menu
            mainMenu.classList.toggle('active');
            
            // Zmieniamy ikonƒô przycisku (z hamburger na X)
            const icon = this.querySelector('i');
            if (icon.classList.contains('fa-bars')) {
                icon.classList.remove('fa-bars');
                icon.classList.add('fa-times');
            } else {
                icon.classList.remove('fa-times');
                icon.classList.add('fa-bars');
            }
        });
    }
    
    // Obs≈Çuga klikniƒôcia w dropdown w menu mobilnym
    dropdowns.forEach(dropdown => {
        const link = dropdown.querySelector('a');
        
        // Obs≈Çuga klikniƒôcia w nag≈Ç√≥wek menu rozwijanego na urzƒÖdzeniach mobilnych
        if (link) {
            link.addEventListener('click', function(e) {
                // Sprawdzamy, czy jeste≈õmy na ma≈Çym ekranie (mobilnym)
                if (window.innerWidth < 992) {
                    // Zatrzymujemy domy≈õlne dzia≈Çanie linku
                    e.preventDefault();
                    
                    // Prze≈ÇƒÖczamy klasƒô active dla dropdown
                    dropdown.classList.toggle('active');
                    
                    // Opcjonalnie mo≈ºemy te≈º zmieniƒá ikonƒô wska≈∫nika
                    const indicator = dropdown.querySelector('.dropdown-indicator');
                    if (indicator) {
                        if (dropdown.classList.contains('active')) {
                            indicator.innerHTML = '<i class="fas fa-chevron-up"></i>';
                        } else {
                            indicator.innerHTML = '<i class="fas fa-chevron-down"></i>';
                        }
                    }
                }
            });
        }
    });
    
    // Zamykanie menu po klikniƒôciu poza menu
    document.addEventListener('click', function(event) {
        if (!event.target.closest('.main-header') && mainMenu && mainMenu.classList.contains('active')) {
            mainMenu.classList.remove('active');
            
            // Znajd≈∫ i zmie≈Ñ ikonƒô menu na hamburger
            if (mobileMenuToggle) {
                const icon = mobileMenuToggle.querySelector('i');
                if (icon) {
                    icon.classList.remove('fa-times');
                    icon.classList.add('fa-bars');
                }
            }
        }
    });
}

// ‚ùì AKORDEON FAQ
function setupFaqAccordion() {
    const faqItems = document.querySelectorAll('.faq-item');
    
    faqItems.forEach(item => {
        const question = item.querySelector('.faq-question');
        const answer = item.querySelector('.faq-answer');
        const icon = item.querySelector('.faq-toggle i');
        
        // Ustawiamy poczƒÖtkowƒÖ wysoko≈õƒá 
        if (answer) {
            // Ustawiamy tylko max-height przez klasƒô CSS
            answer.style.maxHeight = '0px';
        }
        
        if (question) {
            question.addEventListener('click', function() {
                // Zamykamy wszystkie inne odpowiedzi
                faqItems.forEach(otherItem => {
                    if (otherItem !== item && otherItem.classList.contains('active')) {
                        otherItem.classList.remove('active');
                        const otherAnswer = otherItem.querySelector('.faq-answer');
                        if (otherAnswer) {
                            otherAnswer.style.maxHeight = '0px';
                        }
                        
                        const otherIcon = otherItem.querySelector('.faq-toggle i');
                        if (otherIcon) {
                            otherIcon.classList.remove('fa-minus');
                            otherIcon.classList.add('fa-plus');
                        }
                    }
                });
                
                // Prze≈ÇƒÖczamy stan aktualnego elementu
                item.classList.toggle('active');
                
                if (item.classList.contains('active')) {
                    // Dynamicznie ustawiamy wysoko≈õƒá na podstawie rzeczywistej zawarto≈õci
                    // Plus dodajemy margines bezpiecze≈Ñstwa (+50px) dla pewno≈õci
                    answer.style.maxHeight = (answer.scrollHeight + 50) + 'px';
                    
                    if (icon) {
                        icon.classList.remove('fa-plus');
                        icon.classList.add('fa-minus');
                    }
                } else {
                    answer.style.maxHeight = '0px';
                    if (icon) {
                        icon.classList.remove('fa-minus');
                        icon.classList.add('fa-plus');
                    }
                }
            });
        }
    });
    
    // Obs≈Çuga zmiany rozmiaru okna - aktualizacja wysoko≈õci aktywnych element√≥w FAQ
    window.addEventListener('resize', function() {
        const activeItems = document.querySelectorAll('.faq-item.active');
        activeItems.forEach(item => {
            const answer = item.querySelector('.faq-answer');
            if (answer) {
                // Aktualizacja wysoko≈õci przy zmianie rozmiaru okna
                answer.style.maxHeight = (answer.scrollHeight + 50) + 'px';
            }
        });
    });
}

// üìä ANIMACJA LICZNIK√ìW
function setupCounters() {
    const counters = document.querySelectorAll('.counter-value');
    
    // Funkcja sprawdzajƒÖca, czy element jest widoczny na ekranie
    function isElementInViewport(el) {
        const rect = el.getBoundingClientRect();
        return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth)
        );
    }
    
    // Funkcja animujƒÖca licznik
    function animateCounter(counter) {
        const target = parseInt(counter.getAttribute('data-count'));
        
        // Nie zaczynamy ponownie, je≈õli licznik jest ju≈º animowany
        if (counter.textContent !== "0") return;
        
        const duration = 2000; // Czas trwania animacji w ms
        const step = target / duration * 10; // Co ile ms aktualizujemy licznik
        let current = 0;
        
        const timer = setInterval(function() {
            current += step;
            if (current >= target) {
                clearInterval(timer);
                counter.textContent = target.toLocaleString(); // Formatowanie liczb z separatorami
            } else {
                counter.textContent = Math.floor(current).toLocaleString();
            }
        }, 10);
    }
    
    // Uruchamiamy animacjƒô, gdy liczniki sƒÖ widoczne
    function checkCounters() {
        counters.forEach(counter => {
            if (isElementInViewport(counter) && counter.textContent === "0") {
                animateCounter(counter);
            }
        });
    }
    
    // Sprawdzamy przy przewijaniu
    window.addEventListener('scroll', checkCounters);
    
    // Sprawdzamy r√≥wnie≈º na starcie
    checkCounters();
}

// üìù OBS≈ÅUGA FORMULARZA KONTAKTOWEGO
function setupContactForm() {
    const contactForm = document.getElementById('home-contact-form');
    
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault(); // Zapobiegamy domy≈õlnemu wys≈Çaniu formularza
            
            // Sprawdzamy poprawno≈õƒá formularza
            let isValid = true;
            const requiredFields = contactForm.querySelectorAll('[required]');
            
            // Sprawdzamy wszystkie wymagane pola
            requiredFields.forEach(field => {
                if (!field.value.trim()) {
                    isValid = false;
                    field.classList.add('error');
                    
                    // Dodajemy potrzƒÖ≈õniƒôcie polem, kt√≥re jest niepoprawne
                    field.classList.add('shake');
                    setTimeout(() => {
                        field.classList.remove('shake');
                    }, 500);
                } else {
                    field.classList.remove('error');
                }
            });
            
            // Sprawdzamy poprawno≈õƒá adresu email
            const emailField = contactForm.querySelector('input[type="email"]');
            if (emailField && emailField.value.trim()) {
                const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailPattern.test(emailField.value)) {
                    isValid = false;
                    emailField.classList.add('error');
                    
                    // Dodajemy potrzƒÖ≈õniƒôcie polem email
                    emailField.classList.add('shake');
                    setTimeout(() => {
                        emailField.classList.remove('shake');
                    }, 500);
                }
            }
            
            if (!isValid) {
                // Pokazujemy komunikat o b≈Çƒôdzie
                showFormMessage(contactForm, '‚ùå Proszƒô wype≈Çniƒá poprawnie wszystkie wymagane pola.', 'error');
                return;
            }
            
            // Zbieramy dane z formularza
            const formData = new FormData(contactForm);
            
            // Zmieniamy stan przycisku
            const submitButton = contactForm.querySelector('button[type="submit"]');
            if (submitButton) {
                submitButton.disabled = true;
                submitButton.innerHTML = 'Wysy≈Çanie... <i class="fas fa-spinner fa-spin"></i>';
            }
            
            // Symulacja dla cel√≥w demonstracyjnych - usu≈Ñ w rzeczywistej implementacji
            setTimeout(function() {
                // Tutaj udajemy, ≈ºe formularz zosta≈Ç wys≈Çany pomy≈õlnie
                showFormMessage(contactForm, '‚úÖ Dziƒôkujemy za wiadomo≈õƒá! Skontaktujemy siƒô wkr√≥tce.', 'success');
                contactForm.reset(); // Czyszczenie formularza
                
                if (submitButton) {
                    submitButton.disabled = false;
                    submitButton.innerHTML = 'Wy≈õlij wiadomo≈õƒá';
                }
            }, 1500);
            
            // Prawdziwa implementacja z fetch API - odkomentuj w rzeczywistym projekcie
            /*
            fetch('send-email.php', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Problem z po≈ÇƒÖczeniem z serwerem.');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Sukces
                    showFormMessage(contactForm, '‚úÖ Dziƒôkujemy za wiadomo≈õƒá! Skontaktujemy siƒô wkr√≥tce.', 'success');
                    contactForm.reset(); // Czyszczenie formularza
                } else {
                    // B≈ÇƒÖd po stronie serwera
                    showFormMessage(contactForm, `‚ùå ${data.message || 'WystƒÖpi≈Ç b≈ÇƒÖd podczas wysy≈Çania wiadomo≈õci.'}`, 'error');
                }
            })
            .catch(error => {
                // B≈ÇƒÖd po≈ÇƒÖczenia
                showFormMessage(contactForm, '‚ùå WystƒÖpi≈Ç problem z wys≈Çaniem formularza. Spr√≥buj ponownie p√≥≈∫niej.', 'error');
                console.error('B≈ÇƒÖd:', error);
            })
            .finally(() => {
                // Zawsze wykonaj na ko≈Ñcu
                if (submitButton) {
                    submitButton.disabled = false;
                    submitButton.innerHTML = 'Wy≈õlij wiadomo≈õƒá';
                }
            });
            */
        });
        
        // Funkcja do wy≈õwietlania komunikat√≥w
        function showFormMessage(form, message, type = 'success') {
            // Sprawd≈∫, czy komunikat ju≈º istnieje i usu≈Ñ go
            const existingMessage = form.querySelector('.form-message');
            if (existingMessage) {
                existingMessage.remove();
            }
            
            // Utw√≥rz nowy element komunikatu
            const messageElement = document.createElement('div');
            messageElement.className = `form-message ${type}`;
            messageElement.innerHTML = message;
            
            // Wstaw komunikat na poczƒÖtku formularza
            form.insertBefore(messageElement, form.firstChild);
            
            // Animacja pojawienia siƒô
            setTimeout(() => {
                messageElement.classList.add('show');
            }, 10);
            
            // Usu≈Ñ komunikat po 5 sekundach w przypadku sukcesu
            if (type === 'success') {
                setTimeout(() => {
                    messageElement.classList.remove('show');
                    setTimeout(() => {
                        messageElement.remove();
                    }, 300);
                }, 5000);
            }
        }
        
        // Usuwamy klasƒô error gdy u≈ºytkownik zaczyna wpisywaƒá
        const formInputs = contactForm.querySelectorAll('input, textarea');
        formInputs.forEach(input => {
            input.addEventListener('input', function() {
                this.classList.remove('error');
                
                // Usu≈Ñ komunikat b≈Çƒôdu, je≈õli u≈ºytkownik poprawia dane
                const errorMessage = contactForm.querySelector('.form-message.error');
                if (errorMessage) {
                    errorMessage.classList.remove('show');
                    setTimeout(() => {
                        errorMessage.remove();
                    }, 300);
                }
            });
        });
    }
}

// ‚¨ÜÔ∏è PRZYCISK "WR√ìƒÜ DO G√ìRY"
function setupScrollToTop() {
    // Najpierw sprawdzamy, czy przycisk ju≈º istnieje - je≈õli nie, tworzymy go
    let scrollTopBtn = document.querySelector('.scroll-top');
    
    if (!scrollTopBtn) {
        // Tworzymy przycisk i dodajemy go do strony
        scrollTopBtn = document.createElement('a');
        scrollTopBtn.className = 'scroll-top';
        scrollTopBtn.innerHTML = '<i class="fas fa-arrow-up"></i>';
        scrollTopBtn.setAttribute('href', '#');
        scrollTopBtn.setAttribute('aria-label', 'Przewi≈Ñ do g√≥ry');
        document.body.appendChild(scrollTopBtn);
    }
    
    // Pokazujemy przycisk po przewiniƒôciu
    window.addEventListener('scroll', function() {
        if (window.pageYOffset > 300) {
            scrollTopBtn.classList.add('visible');
        } else {
            scrollTopBtn.classList.remove('visible');
        }
    });
    
    // Przewijamy do g√≥ry po klikniƒôciu
    scrollTopBtn.addEventListener('click', function(e) {
        e.preventDefault();
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });
}

// üîΩ ZAMYKANIE DROPDOWN MENU PRZY PRZEWIJANIU
function setupDropdownCloseOnScroll() {
    // Funkcja zamykajƒÖca menu dropdown - u≈ºywa klas zamiast bezpo≈õredniej manipulacji stylami
    function closeDropdowns() {
        // Znajd≈∫ wszystkie elementy dropdown
        const dropdowns = document.querySelectorAll('.dropdown');
        
        // Usu≈Ñ klasƒô active z element√≥w dropdown
        dropdowns.forEach(dropdown => {
            dropdown.classList.remove('active');
        });
    }
    
    // Zamykaj menu przy przewijaniu
    window.addEventListener('scroll', closeDropdowns);
    
    // Zamykaj menu przy klikniƒôciu poza dropdown
    document.addEventListener('click', function(e) {
        if (!e.target.closest('.dropdown')) {
            closeDropdowns();
        }
    });
    
    // Obs≈Çuga klawisza Escape do zamykania menu
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeDropdowns();
            
            // Zamykamy r√≥wnie≈º menu mobilne
            const mainMenu = document.querySelector('.main-menu');
            const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
            
            if (mainMenu && mainMenu.classList.contains('active')) {
                mainMenu.classList.remove('active');
                
                if (mobileMenuToggle) {
                    const icon = mobileMenuToggle.querySelector('i');
                    if (icon) {
                        icon.classList.remove('fa-times');
                        icon.classList.add('fa-bars');
                    }
                }
            }
        }
    });
}

// üì¨ OBS≈ÅUGA NEWSLETTERA
function setupNewsletter() {
    const newsletterForm = document.querySelector('.newsletter-form');
    
    if (newsletterForm) {
        newsletterForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const emailInput = this.querySelector('input[type="email"]');
            const submitButton = this.querySelector('button');
            
            if (!emailInput.value.trim()) {
                // Email jest pusty
                emailInput.classList.add('error');
                return;
            }
            
            // Sprawdzamy poprawno≈õƒá emaila
            const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailPattern.test(emailInput.value.trim())) {
                // Email jest niepoprawny
                emailInput.classList.add('error');
                return;
            }
            
            // Zmiana stanu przycisku
            if (submitButton) {
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                submitButton.disabled = true;
            }
            
            // Symulujemy wysy≈Çanie - w rzeczywistym projekcie u≈ºyj fetch API
            setTimeout(() => {
                // Pokazujemy komunikat
                const messageElement = document.createElement('div');
                messageElement.className = 'newsletter-message';
                messageElement.style.color = 'white';
                messageElement.style.marginTop = '10px';
                messageElement.style.fontSize = '0.9rem';
                messageElement.innerHTML = '‚úÖ Dziƒôkujemy za zapisanie siƒô do newslettera!';
                
                // Dodajemy komunikat po formularzu
                newsletterForm.parentNode.appendChild(messageElement);
                
                // Resetujemy formularz
                newsletterForm.reset();
                
                // Przywracamy przycisk
                if (submitButton) {
                    submitButton.innerHTML = '<i class="fas fa-paper-plane"></i>';
                    submitButton.disabled = false;
                }
                
                // Usuwamy komunikat po 5 sekundach
                setTimeout(() => {
                    messageElement.remove();
                }, 5000);
            }, 1500);
        });
        
        // Usuwamy klasƒô error gdy u≈ºytkownik zaczyna wpisywaƒá
        const emailInput = newsletterForm.querySelector('input[type="email"]');
        if (emailInput) {
            emailInput.addEventListener('input', function() {
                this.classList.remove('error');
            });
        }
    }
}

// üîÑ ANIMACJE PRZY PRZEWIJANIU
document.addEventListener('DOMContentLoaded', function() {
    // Wybieramy wszystkie elementy z klasƒÖ reveal-element
    const revealElements = document.querySelectorAll('.reveal-element');
    
    // Funkcja sprawdzajƒÖca, czy element jest widoczny (dla komputer√≥w)
    function checkReveal() {
        // Pƒôtla przez wszystkie elementy do animacji
        revealElements.forEach(element => {
            // Pobieramy pozycjƒô elementu
            const elementTop = element.getBoundingClientRect().top;
            
            // Sprawdzamy, czy element jest w widoku (z ma≈Çym offsetem)
            const isVisible = (
                elementTop < window.innerHeight - 100
            );
            
            // Je≈õli element jest widoczny, dodajemy klasƒô revealed
            if (isVisible) {
                element.classList.add('revealed');
            }
        });
    }
    
    // Wywo≈Çujemy funkcjƒô przy ≈Çadowaniu strony
    checkReveal();
    
    // Dodajemy nas≈Çuchiwanie na przewijanie
    window.addEventListener('scroll', checkReveal);
});