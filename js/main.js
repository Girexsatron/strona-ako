// =========== G≈Å√ìWNE FUNKCJE JAVASCRIPT ===========
// üõ†Ô∏è Ten plik zawiera g≈Ç√≥wne funkcje potrzebne do dzia≈Çania strony

document.addEventListener('DOMContentLoaded', function() {
    // üîÑ Funkcja menu mobilnego
    setupMobileMenu();
    
    // ‚ùì Obs≈Çuga akordeonu FAQ
    setupFaqAccordion();
    
    // üìä Animacja licznik√≥w
    setupCounters();
    
    // üìù Obs≈Çuga formularza kontaktowego
    setupContactForm();
    
    // ‚¨ÜÔ∏è Przycisk powrotu do g√≥ry
    setupScrollToTop();
    
    // üîΩ Zamykanie menu rozwijanego przy przewijaniu
    setupDropdownCloseOnScroll();
});

// üîÑ MENU MOBILNE
function setupMobileMenu() {
    // Znajdujemy przycisk menu mobilnego i menu g≈Ç√≥wne
    const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
    const mainMenu = document.querySelector('.main-menu');
    const dropdowns = document.querySelectorAll('.dropdown');
    
    // Obs≈Çuga klikniƒôcia przycisku menu
    if (mobileMenuToggle) {
        mobileMenuToggle.addEventListener('click', function() {
            // Prze≈ÇƒÖczamy klasƒô active dla menu
            mainMenu.classList.toggle('active');
            
            // Zmieniamy ikonƒô przycisku (z hamburger na X)
            const icon = this.querySelector('i');
            if (icon.classList.contains('fa-bars')) {
                icon.classList.remove('fa-bars');
                icon.classList.add('fa-times');
            } else {
                icon.classList.remove('fa-times');
                icon.classList.add('fa-bars');
            }
        });
    }
    
    // Obs≈Çuga klikniƒôcia w dropdown w menu mobilnym
    dropdowns.forEach(dropdown => {
        const link = dropdown.querySelector('a');
        if (link && window.innerWidth < 992) { // Tylko na ma≈Çych ekranach
            link.addEventListener('click', function(e) {
                // Zatrzymujemy domy≈õlne dzia≈Çanie linku
                e.preventDefault();
                
                // Prze≈ÇƒÖczamy klasƒô active dla dropdown
                dropdown.classList.toggle('active');
            });
        }
    });
    
    // Zamykanie menu po klikniƒôciu poza menu
    document.addEventListener('click', function(event) {
        if (!event.target.closest('.main-header') && mainMenu.classList.contains('active')) {
            mainMenu.classList.remove('active');
            const icon = mobileMenuToggle.querySelector('i');
            icon.classList.remove('fa-times');
            icon.classList.add('fa-bars');
        }
    });
}

// ‚ùì AKORDEON FAQ
function setupFaqAccordion() {
    const faqItems = document.querySelectorAll('.faq-item');
    
    faqItems.forEach(item => {
        const question = item.querySelector('.faq-question');
        const answer = item.querySelector('.faq-answer');
        const icon = item.querySelector('.faq-toggle i');
        
        // Ustawiamy poczƒÖtkowƒÖ wysoko≈õƒá na 0
        if (answer) {
            answer.style.maxHeight = '0px';
        }
        
        if (question) {
            question.addEventListener('click', function() {
                // Zamykamy wszystkie inne odpowiedzi
                faqItems.forEach(otherItem => {
                    if (otherItem !== item && otherItem.classList.contains('active')) {
                        otherItem.classList.remove('active');
                        const otherAnswer = otherItem.querySelector('.faq-answer');
                        if (otherAnswer) otherAnswer.style.maxHeight = '0px';
                        const otherIcon = otherItem.querySelector('.faq-toggle i');
                        if (otherIcon) {
                            otherIcon.classList.remove('fa-minus');
                            otherIcon.classList.add('fa-plus');
                        }
                    }
                });
                
                // Prze≈ÇƒÖczamy stan aktualnego elementu
                item.classList.toggle('active');
                
                if (item.classList.contains('active')) {
                    answer.style.maxHeight = answer.scrollHeight + 'px';
                    icon.classList.remove('fa-plus');
                    icon.classList.add('fa-minus');
                } else {
                    answer.style.maxHeight = '0px';
                    icon.classList.remove('fa-minus');
                    icon.classList.add('fa-plus');
                }
            });
        }
    });
}

// üìä ANIMACJA LICZNIK√ìW
function setupCounters() {
    const counters = document.querySelectorAll('.counter-value');
    
    // Funkcja sprawdzajƒÖca, czy element jest widoczny na ekranie
    function isElementInViewport(el) {
        const rect = el.getBoundingClientRect();
        return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth)
        );
    }
    
    // Funkcja animujƒÖca licznik
    function animateCounter(counter) {
        const target = parseInt(counter.getAttribute('data-count'));
        
        // Nie zaczynamy ponownie, je≈õli licznik jest ju≈º animowany
        if (counter.textContent !== "0") return;
        
        const duration = 2000; // Czas trwania animacji w ms
        const step = target / duration * 10; // Co ile ms aktualizujemy licznik
        let current = 0;
        
        const timer = setInterval(function() {
            current += step;
            if (current >= target) {
                clearInterval(timer);
                counter.textContent = target.toLocaleString(); // Formatowanie liczb z separatorami
            } else {
                counter.textContent = Math.floor(current).toLocaleString();
            }
        }, 10);
    }
    
    // Uruchamiamy animacjƒô, gdy liczniki sƒÖ widoczne
    function checkCounters() {
        counters.forEach(counter => {
            if (isElementInViewport(counter) && counter.textContent === "0") {
                animateCounter(counter);
            }
        });
    }
    
    // Sprawdzamy przy przewijaniu
    window.addEventListener('scroll', checkCounters);
    
    // Sprawdzamy r√≥wnie≈º na starcie
    checkCounters();
}

// üìù OBS≈ÅUGA FORMULARZA KONTAKTOWEGO
function setupContactForm() {
    const contactForm = document.getElementById('home-contact-form');
    
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault(); // Zapobiegamy domy≈õlnemu wys≈Çaniu formularza
            
            // Sprawdzamy poprawno≈õƒá formularza
            let isValid = true;
            const requiredFields = contactForm.querySelectorAll('[required]');
            
            // Sprawdzamy wszystkie wymagane pola
            requiredFields.forEach(field => {
                if (!field.value.trim()) {
                    isValid = false;
                    field.classList.add('error');
                } else {
                    field.classList.remove('error');
                }
            });
            
            // Sprawdzamy poprawno≈õƒá adresu email
            const emailField = contactForm.querySelector('input[type="email"]');
            if (emailField && emailField.value.trim()) {
                const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailPattern.test(emailField.value)) {
                    isValid = false;
                    emailField.classList.add('error');
                }
            }
            
            if (!isValid) {
                // Pokazujemy komunikat o b≈Çƒôdzie
                alert('‚ùå Proszƒô wype≈Çniƒá poprawnie wszystkie wymagane pola.');
                return;
            }
            
            // Zbieramy dane z formularza
            const formData = {
                name: document.getElementById('name').value,
                email: document.getElementById('email').value,
                phone: document.getElementById('phone').value,
                message: document.getElementById('message').value,
                privacy: document.getElementById('privacy').checked
            };
            
            // üîî Tutaj mo≈ºesz dodaƒá kod do wysy≈Çania formularza przez AJAX
            // Na razie tylko poka≈ºemy alert z sukcesem
            
            // Symulujemy wysy≈Çanie (w rzeczywisto≈õci musisz to zastƒÖpiƒá prawdziwƒÖ funkcjƒÖ)
            const submitButton = contactForm.querySelector('button[type="submit"]');
            submitButton.disabled = true;
            submitButton.innerHTML = 'Wysy≈Çanie...';
            
            setTimeout(function() {
                alert('‚úÖ Dziƒôkujemy za wiadomo≈õƒá! Skontaktujemy siƒô wkr√≥tce.');
                contactForm.reset(); // Czyszczenie formularza
                submitButton.disabled = false;
                submitButton.innerHTML = 'Wy≈õlij wiadomo≈õƒá';
            }, 1000);
        });
        
        // Usuwamy klasƒô error gdy u≈ºytkownik zaczyna wpisywaƒá
        const formInputs = contactForm.querySelectorAll('input, textarea');
        formInputs.forEach(input => {
            input.addEventListener('input', function() {
                this.classList.remove('error');
            });
        });
    }
}

// ‚¨ÜÔ∏è PRZYCISK "WR√ìƒÜ DO G√ìRY"
function setupScrollToTop() {
    // Najpierw sprawdzamy, czy przycisk ju≈º istnieje - je≈õli nie, tworzymy go
    let scrollTopBtn = document.querySelector('.scroll-top');
    
    if (!scrollTopBtn) {
        // Tworzymy przycisk i dodajemy go do strony
        scrollTopBtn = document.createElement('a');
        scrollTopBtn.className = 'scroll-top';
        scrollTopBtn.innerHTML = '<i class="fas fa-arrow-up"></i>';
        scrollTopBtn.setAttribute('href', '#');
        scrollTopBtn.setAttribute('aria-label', 'Przewi≈Ñ do g√≥ry');
        document.body.appendChild(scrollTopBtn);
    }
    
    // Pokazujemy przycisk po przewiniƒôciu
    window.addEventListener('scroll', function() {
        if (window.pageYOffset > 300) {
            scrollTopBtn.classList.add('visible');
        } else {
            scrollTopBtn.classList.remove('visible');
        }
    });
    
    // Przewijamy do g√≥ry po klikniƒôciu
    scrollTopBtn.addEventListener('click', function(e) {
        e.preventDefault();
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });
}

// üîΩ ZAMYKANIE DROPDOWN MENU PRZY PRZEWIJANIU
function setupDropdownCloseOnScroll() {
    // Funkcja zamykajƒÖca menu dropdown
    function closeDropdowns() {
        // Znajd≈∫ wszystkie menu dropdown
        const dropdownMenus = document.querySelectorAll('.dropdown-menu');
        
        // Ukryj wszystkie dropdown menu
        dropdownMenus.forEach(menu => {
            menu.style.display = 'none';
        });
        
        // Usu≈Ñ klasƒô active z element√≥w dropdown (je≈õli u≈ºywasz jej w wersji mobilnej)
        const dropdowns = document.querySelectorAll('.dropdown');
        dropdowns.forEach(dropdown => {
            dropdown.classList.remove('active');
        });
    }
    
    // Zamykaj menu przy przewijaniu
    window.addEventListener('scroll', closeDropdowns);
    
    // Zamykaj menu przy klikniƒôciu poza dropdown
    document.addEventListener('click', function(e) {
        if (!e.target.closest('.dropdown')) {
            closeDropdowns();
        }
    });
}