// =========== FUNKCJE GALERII REALIZACJI ===========
// üì∏ Ten plik zawiera funkcje do obs≈Çugi galerii zdjƒôƒá naszych realizacji

document.addEventListener('DOMContentLoaded', function() {
    // Inicjalizujemy galeriƒô realizacji
    initGallery();
});

// üì∏ INICJALIZACJA I OBS≈ÅUGA GALERII
function initGallery() {
    // Znajdujemy elementy galerii
    const galleryContainer = document.querySelector('.gallery-container');
    
    // Je≈õli galeria nie istnieje na tej stronie, ko≈Ñczymy
    if (!galleryContainer) return;
    
    const filterButtons = document.querySelectorAll('.filter-btn');
    const galleryItems = document.querySelectorAll('.gallery-item');
    const galleryModal = document.querySelector('.gallery-modal');
    const modalImage = document.getElementById('modal-image');
    const modalTitle = document.getElementById('modal-title');
    const modalDescription = document.getElementById('modal-description');
    const modalClose = document.querySelector('.modal-close');
    
    // üîç Obs≈Çuga filtrowania
    setupFiltering(filterButtons, galleryItems);
    
    // üñºÔ∏è Obs≈Çuga powiƒôkszania zdjƒôƒá
    setupZoom(galleryItems, galleryModal, modalImage, modalTitle, modalDescription);
    
    // ‚ùå Zamykanie modalu
    setupModalClosing(galleryModal, modalClose);
    
    // üîÑ Inicjalizacja - domy≈õlnie pokazujemy wszystkie elementy
    if (filterButtons.length > 0) {
        filterButtons[0].click();
    }
    
    console.log('‚úÖ Galeria zainicjalizowana pomy≈õlnie');
}

// üîç FILTROWANIE ELEMENT√ìW GALERII
function setupFiltering(filterButtons, galleryItems) {
    filterButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Usuwamy klasƒô 'active' ze wszystkich przycisk√≥w
            filterButtons.forEach(btn => btn.classList.remove('active'));
            
            // Dodajemy klasƒô 'active' do klikniƒôtego przycisku
            this.classList.add('active');
            
            // Pobieramy kategoriƒô do filtrowania
            const filterValue = this.getAttribute('data-filter');
            
            // Zapisujemy aktywnƒÖ kategoriƒô w przeglƒÖdarce (do zapamiƒôtania po od≈õwie≈ºeniu)
            localStorage.setItem('activeGalleryFilter', filterValue);
            
            // Filtrujemy elementy galerii
            filterGalleryItems(galleryItems, filterValue);
        });
    });
    
    // Sprawdzamy, czy mamy zapisanƒÖ kategoriƒô w pamiƒôci
    const savedFilter = localStorage.getItem('activeGalleryFilter');
    if (savedFilter) {
        // Znajd≈∫ przycisk z zapisanƒÖ kategoriƒÖ
        const savedButton = Array.from(filterButtons).find(
            button => button.getAttribute('data-filter') === savedFilter
        );
        
        // Je≈õli znaleziono przycisk, aktywuj go
        if (savedButton) {
            savedButton.click();
        } else {
            // Je≈õli nie znaleziono, aktywuj pierwszy
            filterButtons[0].click();
        }
    }
}

// üé≠ FILTROWANIE POSZCZEG√ìLNYCH ELEMENT√ìW
function filterGalleryItems(items, filterValue) {
    items.forEach(item => {
        const itemCategory = item.getAttribute('data-category');
        
        // Pokazujemy wszystkie lub tylko te pasujƒÖce do filtra
        if (filterValue === 'all' || filterValue === itemCategory) {
            // Pokazujemy z animacjƒÖ
            item.style.display = 'block';
            setTimeout(() => {
                item.style.opacity = 1;
                item.style.transform = 'scale(1)';
            }, 50);
        } else {
            // Ukrywamy z animacjƒÖ
            item.style.opacity = 0;
            item.style.transform = 'scale(0.8)';
            setTimeout(() => {
                item.style.display = 'none';
            }, 300);
        }
    });
}

// üñºÔ∏è POWIƒòKSZANIE ZDJƒòƒÜ
function setupZoom(galleryItems, galleryModal, modalImage, modalTitle, modalDescription) {
    const zoomButtons = document.querySelectorAll('.gallery-zoom');
    
    zoomButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Pobieramy dane z rodzica przycisku
            const galleryItem = this.closest('.gallery-item');
            const image = galleryItem.querySelector('img');
            const title = galleryItem.querySelector('h3').textContent;
            const description = galleryItem.querySelector('p').textContent;
            
            // Ustawiamy dane w modalu
            modalImage.src = image.src;
            modalImage.alt = image.alt;
            modalTitle.textContent = title;
            modalDescription.textContent = description;
            
            // Pokazujemy modal
            galleryModal.style.display = 'flex';
            document.body.style.overflow = 'hidden'; // Blokujemy przewijanie strony
            
            // Dodajemy klasƒô dla animacji
            setTimeout(() => {
                modalImage.classList.add('loaded');
            }, 50);
        });
    });
}

// ‚ùå ZAMYKANIE MODALU
function setupModalClosing(galleryModal, modalClose) {
    // Funkcja zamykajƒÖca modal
    function closeModal() {
        galleryModal.style.display = 'none';
        document.body.style.overflow = 'auto'; // Przywracamy przewijanie strony
        
        // Resetujemy klasƒô animacji
        const modalImage = document.getElementById('modal-image');
        if (modalImage) {
            modalImage.classList.remove('loaded');
        }
    }
    
    // Zamykanie po klikniƒôciu przycisku zamkniƒôcia
    if (modalClose) {
        modalClose.addEventListener('click', closeModal);
    }
    
    // Zamykanie po klikniƒôciu poza obrazem
    if (galleryModal) {
        galleryModal.addEventListener('click', function(e) {
            if (e.target === galleryModal) {
                closeModal();
            }
        });
    }
    
    // Obs≈Çuga klawisza ESC do zamykania modalu
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && galleryModal && galleryModal.style.display === 'flex') {
            closeModal();
        }
    });
}

// üîÑ OD≈öWIE≈ªANIE GALERII
// Funkcja pomocnicza do wywo≈Çania po dodaniu nowych zdjƒôƒá dynamicznie
function refreshGallery() {
    // Ponownie znajdujemy wszystkie elementy
    const galleryItems = document.querySelectorAll('.gallery-item');
    const filterButtons = document.querySelectorAll('.filter-btn');
    const galleryModal = document.querySelector('.gallery-modal');
    const modalImage = document.getElementById('modal-image');
    const modalTitle = document.getElementById('modal-title');
    const modalDescription = document.getElementById('modal-description');
    const modalClose = document.querySelector('.modal-close');
    
    // Aktualizujemy obs≈Çugƒô filtrowania
    setupFiltering(filterButtons, galleryItems);
    
    // Aktualizujemy obs≈Çugƒô powiƒôkszania
    setupZoom(galleryItems, galleryModal, modalImage, modalTitle, modalDescription);
    
    // Aktualizujemy obs≈Çugƒô zamykania modalu
    setupModalClosing(galleryModal, modalClose);
    
    console.log('üîÑ Galeria zosta≈Ça od≈õwie≈ºona');
}

// Eksportujemy funkcjƒô od≈õwie≈ºania, gdyby by≈Ça potrzebna gdzie indziej
window.refreshGallery = refreshGallery;